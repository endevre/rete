{"version":3,"file":"rete.esm.js","sources":["../src/scope.ts","../src/editor.ts","../src/utils.ts","../src/presets/classic.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport {\n  AcceptPartialUnion, CanAssignSignal, GetAssignmentReferences, GetNonAssignableElements, Tail\n} from './utility-types'\n\nexport type { CanAssignSignal }\n\n/**\n * A middleware type that can modify the data\n * @typeParam T - The data type\n * @param data - The data to be modified\n * @returns The modified data or undefined\n * @example (data) => data + 1\n * @example (data) => undefined // will stop the execution\n * @internal\n */\nexport type Pipe<T> = (data: T) => Promise<undefined | T> | undefined | T\n\nexport type CanAssignEach<D extends any[], F extends any[]> = D extends [infer H1, ...infer Tail1]\n  ? (\n    F extends [infer H2, ...infer Tail2] ?\n    [CanAssignSignal<H1, H2>, ...CanAssignEach<Tail1, Tail2>]\n    : []\n  ) : []\n\nexport type ScopeAsParameter<S extends Scope<any, any[]>, Current extends any[]> = (CanAssignEach<[S['__scope']['produces'], ...S['__scope']['parents']], Current>[number] extends true\n  ? S\n  : 'Argument Scope does not provide expected signals'\n)\n\n/**\n * Validate the Scope signals and replace the parameter type with an error message if they are not assignable\n * @internal\n */\nexport type NestedScope<S extends Scope<any, any[]>, Current extends any[]> = (CanAssignEach<Current, S['__scope']['parents']>[number] extends true\n  ? S\n  : 'Parent signals do not satisfy the connected scope. Please use `.debug($ => $) for detailed assignment error'\n)\n\n/**\n * Provides 'debug' method to check the detailed assignment error message\n * @example .debug($ => $)\n * @internal\n */\nexport function useHelper<S extends Scope<any, any[]>, Signals>() {\n  type T1 = S['__scope']['parents'][number]\n  return {\n    debug<T extends GetNonAssignableElements<T1, Signals>>(f: (p: GetAssignmentReferences<T, Signals>) => T) {\n      f\n    }\n  }\n}\n\n/**\n * A signal is a middleware chain that can be used to modify the data\n * @typeParam T - The data type\n * @internal\n */\nexport class Signal<T> {\n  pipes: Pipe<T>[] = []\n\n  addPipe(pipe: Pipe<T>) {\n    this.pipes.push(pipe)\n  }\n\n  async emit<Context extends T>(context: Context): Promise<Context | undefined> {\n    let current: Context | undefined = context\n\n    for (const pipe of this.pipes) {\n      current = await pipe(current) as Context\n\n      if (typeof current === 'undefined') return\n    }\n    return current\n  }\n}\n\ntype Type<T> = {\n  new(...args: any[]): T;\n} | (abstract new (...args: any[]) => T)\n\n/**\n * Base class for all plugins and the core. Provides a signals mechanism to modify the data\n */\nexport class Scope<Produces, Parents extends unknown[] = []> {\n  signal = new Signal<AcceptPartialUnion<Produces | Parents[number]>>()\n  parent?: any // Parents['length'] extends 0 ? undefined : Scope<Parents[0], Tail<Parents>>\n  __scope: {\n    produces: Produces\n    parents: Parents\n  }\n\n  constructor(public name: string) { }\n\n  addPipe(middleware: Pipe<Produces | Parents[number]>) {\n    this.signal.addPipe(middleware)\n  }\n\n  use<S extends Scope<any, any[]>>(scope: NestedScope<S, [Produces, ...Parents]>) {\n    if (!(scope instanceof Scope)) throw new Error('cannot use non-Scope instance')\n\n    scope.setParent(this)\n    this.addPipe(context => {\n      return scope.signal.emit(context)\n    })\n\n    return useHelper<S, Produces | Parents[number]>()\n  }\n\n  setParent(scope: Scope<Parents[0], Tail<Parents>>) {\n    this.parent = scope\n  }\n\n  emit<C extends Produces>(context: C): Promise<Extract<Produces, C> | undefined> {\n    return this.signal.emit(context) as Promise<Extract<Produces, C>>\n  }\n\n  hasParent(): boolean {\n    return Boolean(this.parent)\n  }\n\n  parentScope<T extends Parents[0], P extends Tail<Parents>>(): Scope<T, P>\n  parentScope<T>(type: Type<T>): T\n  parentScope<T>(type?: Type<T>): T {\n    if (!this.parent) throw new Error('cannot find parent')\n    if (type && this.parent instanceof type) return this.parent\n    if (type) throw new Error('actual parent is not instance of type')\n    return this.parent\n  }\n}\n","import { Scope } from './scope'\nimport { BaseSchemes } from './types'\n\n/**\n * Signal types produced by NodeEditor instance\n * @typeParam Scheme - The scheme type\n * @priority 10\n * @group Primary\n */\nexport type Root<Scheme extends BaseSchemes> =\n  | { type: 'nodecreate', data: Scheme['Node'] }\n  | { type: 'nodecreated', data: Scheme['Node'] }\n  | { type: 'noderemove', data: Scheme['Node'] }\n  | { type: 'noderemoved', data: Scheme['Node'] }\n  | { type: 'connectioncreate', data: Scheme['Connection'] }\n  | { type: 'connectioncreated', data: Scheme['Connection'] }\n  | { type: 'connectionremove', data: Scheme['Connection'] }\n  | { type: 'connectionremoved', data: Scheme['Connection'] }\n  | { type: 'clear' }\n  | { type: 'clearcancelled' }\n  | { type: 'cleared' }\n\n/**\n * The NodeEditor class is the entry class. It is used to create and manage nodes and connections.\n * @typeParam Scheme - The scheme type\n * @priority 7\n * @group Primary\n */\nexport class NodeEditor<Scheme extends BaseSchemes> extends Scope<Root<Scheme>> {\n  private nodes: Scheme['Node'][] = []\n  private connections: Scheme['Connection'][] = []\n\n  constructor() {\n    super('NodeEditor')\n  }\n\n  /**\n   * Get a node by id\n   * @param id - The node id\n   * @returns The node or undefined\n   */\n  public getNode(id: Scheme['Node']['id']) {\n    return this.nodes.find(node => node.id === id)\n  }\n\n  /**\n   * Get all nodes\n   * @returns Copy of array with nodes\n   */\n  public getNodes() {\n    return this.nodes.slice()\n  }\n\n  /**\n   * Get all connections\n   * @returns Copy of array with onnections\n   */\n  public getConnections() {\n    return this.connections.slice()\n  }\n\n  /**\n   * Get a connection by id\n   * @param id - The connection id\n   * @returns The connection or undefined\n   */\n  public getConnection(id: Scheme['Connection']['id']) {\n    return this.connections.find(connection => connection.id === id)\n  }\n\n  /**\n   * Add a node\n   * @param data - The node data\n   * @returns Whether the node was added\n   * @throws If the node has already been added\n   * @emits nodecreate\n   * @emits nodecreated\n   */\n  async addNode(data: Scheme['Node']) {\n    if (this.getNode(data.id)) throw new Error('node has already been added')\n\n    if (!await this.emit({ type: 'nodecreate', data })) return false\n\n    this.nodes.push(data)\n\n    await this.emit({ type: 'nodecreated', data })\n    return true\n  }\n\n  /**\n   * Add a connection\n   * @param data - The connection data\n   * @returns Whether the connection was added\n   * @throws If the connection has already been added\n   * @emits connectioncreate\n   * @emits connectioncreated\n   */\n  async addConnection(data: Scheme['Connection']) {\n    if (this.getConnection(data.id)) throw new Error('connection has already been added')\n\n    if (!await this.emit({ type: 'connectioncreate', data })) return false\n\n    this.connections.push(data)\n\n    await this.emit({ type: 'connectioncreated', data })\n    return true\n  }\n\n  /**\n   * Remove a node\n   * @param id - The node id\n   * @returns Whether the node was removed\n   * @throws If the node cannot be found\n   * @emits noderemove\n   * @emits noderemoved\n   */\n  async removeNode(id: Scheme['Node']['id']) {\n    const index = this.nodes.findIndex(n => n.id === id)\n    const node = this.nodes[index]\n\n    if (index < 0) throw new Error('cannot find node')\n\n    if (!await this.emit({ type: 'noderemove', data: node })) return false\n\n    this.nodes.splice(index, 1)\n\n    await this.emit({ type: 'noderemoved', data: node })\n    return true\n  }\n\n  /**\n   * Remove a connection\n   * @param id - The connection id\n   * @returns Whether the connection was removed\n   * @throws If the connection cannot be found\n   * @emits connectionremove\n   * @emits connectionremoved\n   */\n  async removeConnection(id: Scheme['Connection']['id']) {\n    const index = this.connections.findIndex(n => n.id === id)\n    const connection = this.connections[index]\n\n    if (index < 0) throw new Error('cannot find connection')\n\n    if (!await this.emit({ type: 'connectionremove', data: connection })) return false\n\n    this.connections.splice(index, 1)\n\n    await this.emit({ type: 'connectionremoved', data: connection })\n    return true\n  }\n\n  /**\n   * Clear all nodes and connections\n   * @returns Whether the editor was cleared\n   * @emits clear\n   * @emits clearcancelled\n   * @emits cleared\n   */\n  async clear() {\n    if (!await this.emit({ type: 'clear' })) {\n      await this.emit({ type: 'clearcancelled' })\n      return false\n    }\n\n    for (const connection of this.connections.slice()) await this.removeConnection(connection.id)\n    for (const node of this.nodes.slice()) await this.removeNode(node.id)\n\n    await this.emit({ type: 'cleared' })\n    return true\n  }\n}\n","/* global globalThis*/\n\nconst nodeCrypto = () => import('node:crypto')\n\nconst crypto = globalThis.crypto as (typeof globalThis.crypto | Awaited<ReturnType<typeof nodeCrypto>>)\n\n/**\n * @returns A unique id\n */\nexport function getUID(): string {\n  if ('randomBytes' in crypto) {\n    return crypto.randomBytes(8).toString('hex')\n  }\n\n  const bytes = crypto.getRandomValues(new Uint8Array(8))\n  const array = Array.from(bytes)\n  const hexPairs = array.map(b => b.toString(16).padStart(2, '0'))\n\n  return hexPairs.join('')\n}\n","/**\n * Contains classes for classic scheme such as Node, Input, Output, Control, Socket, Connection\n * @module\n * @group Primary\n */\n\nimport { ConnectionBase, NodeBase } from '../types'\nimport { getUID } from '../utils'\n\ntype PortId = string\n\n/**\n * The socket class\n * @priority 7\n */\nexport class Socket {\n  /**\n   * @constructor\n   * @param name Name of the socket\n   */\n  constructor(public name: string) {\n\n  }\n}\n\n/**\n * General port class\n */\nexport class Port<S extends Socket> {\n  /**\n   * Port id, unique string generated by `getUID` function\n   */\n  id: PortId\n  /**\n   * Port index, used for sorting ports. Default is `0`\n   */\n  index?: number\n\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the port\n   * @param multipleConnections Whether the output port can have multiple connections\n   */\n  constructor(public socket: S, public label?: string, public multipleConnections?: boolean) {\n    this.id = getUID()\n  }\n}\n\n/**\n * The input port class\n * @priority 6\n */\nexport class Input<S extends Socket> extends Port<S> {\n  /**\n   * Control instance\n   */\n  control: Control | null = null\n  /**\n   * Whether the control is visible. Can be managed dynamically by extensions. Default is `true`\n   */\n  showControl = true\n\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the input port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `false`\n   */\n  constructor(public socket: S, public label?: string, public multipleConnections?: boolean) {\n    super(socket, label, multipleConnections)\n  }\n\n  /**\n   * Add control to the input port\n   * @param control Control instance\n   */\n  addControl(control: Control) {\n    if (this.control) throw new Error('control already added for this input')\n    this.control = control\n  }\n\n  /**\n   * Remove control from the input port\n   */\n  removeControl() {\n    this.control = null\n  }\n}\n\n/**\n * The output port class\n * @priority 5\n */\nexport class Output<S extends Socket> extends Port<S> {\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the output port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `true`\n   */\n  constructor(socket: S, label?: string, multipleConnections?: boolean) {\n    super(socket, label, multipleConnections !== false)\n  }\n}\n\n/**\n * General control class\n * @priority 5\n */\nexport class Control {\n  /**\n   * Control id, unique string generated by `getUID` function\n   */\n  id: string\n  /**\n   * Control index, used for sorting controls. Default is `0`\n   */\n  index?: number\n\n  constructor() {\n    this.id = getUID()\n  }\n}\n\n/**\n * Input control options\n */\ntype InputControlOptions<N> = {\n  /** Whether the control is readonly. Default is `false` */\n  readonly?: boolean,\n  /** Initial value of the control */\n  initial?: N,\n  /** Callback function that is called when the control value changes */\n  change?: (value: N) => void\n}\n/**\n * The input control class\n * @example new InputControl('text', { readonly: true, initial: 'hello' })\n */\nexport class InputControl<T extends 'text' | 'number', N = T extends 'text' ? string : number> extends Control {\n  value?: N\n  readonly: boolean\n\n  /**\n   * @constructor\n   * @param type Type of the control: `text` or `number`\n   * @param options Control options\n   */\n  constructor(public type: T, public options?: InputControlOptions<N>) {\n    super()\n    this.id = getUID()\n    this.readonly = options?.readonly\n\n    if (typeof options?.initial !== 'undefined') this.value = options.initial\n  }\n\n  /**\n   * Set control value\n   * @param value Value to set\n   */\n  setValue(value?: N) {\n    this.value = value\n    if (this.options?.change) this.options.change(value)\n  }\n}\n\n/**\n * The node class\n * @priority 10\n * @example new Node('math')\n */\nexport class Node<\n  Inputs extends { [key in string]?: Socket } = { [key in string]?: Socket },\n  Outputs extends { [key in string]?: Socket } = { [key in string]?: Socket },\n  Controls extends { [key in string]?: Control } = { [key in string]?: Control }\n> implements NodeBase {\n  /**\n   * Node id, unique string generated by `getUID` function\n   */\n  id: NodeBase['id']\n  /**\n   * Node inputs\n   */\n  inputs: { [key in keyof Inputs]?: Input<Exclude<Inputs[key], undefined>> } = {}\n  /**\n   * Node outputs\n   */\n  outputs: { [key in keyof Outputs]?: Output<Exclude<Outputs[key], undefined>> } = {}\n  /**\n   * Node controls\n   */\n  controls: Controls = {} as Controls\n  /**\n   * Whether the node is selected. Default is `false`\n   */\n  selected?: boolean\n\n  constructor(public label: string) {\n    this.id = getUID()\n  }\n\n  hasInput<K extends keyof Inputs>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.inputs, key)\n  }\n\n  addInput<K extends keyof Inputs>(key: K, input: Input<Exclude<Inputs[K], undefined>>) {\n    if (this.hasInput(key)) throw new Error(`input with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.inputs, key, { value: input, enumerable: true, configurable: true })\n  }\n\n  removeInput(key: keyof Inputs) {\n    delete this.inputs[key]\n  }\n\n  hasOutput<K extends keyof Outputs>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.outputs, key)\n  }\n\n  addOutput<K extends keyof Outputs>(key: K, output: Output<Exclude<Outputs[K], undefined>>) {\n    if (this.hasOutput(key)) throw new Error(`output with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.outputs, key, { value: output, enumerable: true, configurable: true })\n  }\n\n  removeOutput(key: keyof Outputs) {\n    delete this.outputs[key]\n  }\n\n  hasControl<K extends keyof Controls>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.controls, key)\n  }\n\n  addControl<K extends keyof Controls>(key: K, control: Controls[K]) {\n    if (this.hasControl(key)) throw new Error(`control with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.controls, key, { value: control, enumerable: true, configurable: true })\n  }\n\n  removeControl(key: keyof Controls) {\n    delete this.controls[key]\n  }\n}\n\n/**\n * The connection class\n * @priority 9\n */\nexport class Connection<\n  Source extends Node,\n  Target extends Node\n> implements ConnectionBase {\n  /**\n   * Connection id, unique string generated by `getUID` function\n   */\n  id: ConnectionBase['id']\n  /**\n   * Source node id\n   */\n  source: NodeBase['id']\n  /**\n   * Target node id\n   */\n  target: NodeBase['id']\n\n  /**\n   * @constructor\n   * @param source Source node instance\n   * @param sourceOutput Source node output key\n   * @param target Target node instance\n   * @param targetInput Target node input key\n   */\n  constructor(\n    source: Source,\n    public sourceOutput: keyof Source['outputs'],\n    target: Target,\n    public targetInput: keyof Target['inputs']\n  ) {\n    if (!source.outputs[sourceOutput as string]) {\n      throw new Error(`source node doesn't have output with a key ${String(sourceOutput)}`)\n    }\n    if (!target.inputs[targetInput as string]) {\n      throw new Error(`target node doesn't have input with a key ${String(targetInput)}`)\n    }\n\n    this.id = getUID()\n    this.source = source.id\n    this.target = target.id\n  }\n}\n"],"names":["useHelper","debug","f","Signal","_classCallCheck","_defineProperty","_createClass","key","value","addPipe","pipe","pipes","push","_emit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","current","_iterator","_step","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper","s","n","done","sent","abrupt","t0","e","finish","stop","emit","_x","apply","arguments","Scope","name","middleware","signal","use","scope","Error","setParent","parent","hasParent","Boolean","parentScope","type","NodeEditor","_Scope","_inherits","_super","_createSuper","_this","call","_assertThisInitialized","getNode","id","nodes","find","node","getNodes","slice","getConnections","connections","getConnection","connection","_addNode","data","addNode","_addConnection","_callee2","_callee2$","_context2","addConnection","_x2","_removeNode","_callee3","index","_callee3$","_context3","findIndex","splice","removeNode","_x3","_removeConnection","_callee4","_callee4$","_context4","removeConnection","_x4","_clear","_callee5","_iterator2","_step2","_callee5$","_context5","t1","clear","crypto","globalThis","getUID","randomBytes","toString","bytes","getRandomValues","Uint8Array","array","Array","from","hexPairs","map","b","padStart","join","Socket","Port","socket","label","multipleConnections","Input","_Port","addControl","control","removeControl","Output","_Port2","_super2","Control","InputControl","_Control","_super3","options","_this2","readonly","initial","setValue","_this$options","change","Node","hasInput","Object","prototype","hasOwnProperty","inputs","addInput","input","concat","String","defineProperty","enumerable","configurable","removeInput","hasOutput","outputs","addOutput","output","removeOutput","hasControl","controls","Connection","source","sourceOutput","target","targetInput"],"mappings":"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"}