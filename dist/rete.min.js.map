{"version":3,"file":"rete.min.js","sources":["../src/scope.ts","../src/editor.ts","../src/utils.ts","../src/presets/classic.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport {\n  AcceptPartialUnion, CanAssignSignal, GetAssignmentReferences, GetNonAssignableElements, Tail\n} from './utility-types'\n\nexport type { CanAssignSignal }\n\n/**\n * A middleware type that can modify the data\n * @typeParam T - The data type\n * @param data - The data to be modified\n * @returns The modified data or undefined\n * @example (data) => data + 1\n * @example (data) => undefined // will stop the execution\n * @internal\n */\nexport type Pipe<T> = (data: T) => Promise<undefined | T> | undefined | T\n\nexport type CanAssignEach<D extends any[], F extends any[]> = D extends [infer H1, ...infer Tail1]\n  ? (\n    F extends [infer H2, ...infer Tail2] ?\n    [CanAssignSignal<H1, H2>, ...CanAssignEach<Tail1, Tail2>]\n    : []\n  ) : []\n\nexport type ScopeAsParameter<S extends Scope<any, any[]>, Current extends any[]> = (CanAssignEach<[S['__scope']['produces'], ...S['__scope']['parents']], Current>[number] extends true\n  ? S\n  : 'Argument Scope does not provide expected signals'\n)\n\n/**\n * Validate the Scope signals and replace the parameter type with an error message if they are not assignable\n * @internal\n */\nexport type NestedScope<S extends Scope<any, any[]>, Current extends any[]> = (CanAssignEach<Current, S['__scope']['parents']>[number] extends true\n  ? S\n  : 'Parent signals do not satisfy the connected scope. Please use `.debug($ => $) for detailed assignment error'\n)\n\n/**\n * Provides 'debug' method to check the detailed assignment error message\n * @example .debug($ => $)\n * @internal\n */\nexport function useHelper<S extends Scope<any, any[]>, Signals>() {\n  type T1 = S['__scope']['parents'][number]\n  return {\n    debug<T extends GetNonAssignableElements<T1, Signals>>(f: (p: GetAssignmentReferences<T, Signals>) => T) {\n      f\n    }\n  }\n}\n\n/**\n * A signal is a middleware chain that can be used to modify the data\n * @typeParam T - The data type\n * @internal\n */\nexport class Signal<T> {\n  pipes: Pipe<T>[] = []\n\n  addPipe(pipe: Pipe<T>) {\n    this.pipes.push(pipe)\n  }\n\n  async emit<Context extends T>(context: Context): Promise<Context | undefined> {\n    let current: Context | undefined = context\n\n    for (const pipe of this.pipes) {\n      current = await pipe(current) as Context\n\n      if (typeof current === 'undefined') return\n    }\n    return current\n  }\n}\n\ntype Type<T> = {\n  new(...args: any[]): T;\n} | (abstract new (...args: any[]) => T)\n\n/**\n * Base class for all plugins and the core. Provides a signals mechanism to modify the data\n */\nexport class Scope<Produces, Parents extends unknown[] = []> {\n  signal = new Signal<AcceptPartialUnion<Produces | Parents[number]>>()\n  parent?: any // Parents['length'] extends 0 ? undefined : Scope<Parents[0], Tail<Parents>>\n  __scope: {\n    produces: Produces\n    parents: Parents\n  }\n\n  constructor(public name: string) { }\n\n  addPipe(middleware: Pipe<Produces | Parents[number]>) {\n    this.signal.addPipe(middleware)\n  }\n\n  use<S extends Scope<any, any[]>>(scope: NestedScope<S, [Produces, ...Parents]>) {\n    if (!(scope instanceof Scope)) throw new Error('cannot use non-Scope instance')\n\n    scope.setParent(this)\n    this.addPipe(context => {\n      return scope.signal.emit(context)\n    })\n\n    return useHelper<S, Produces | Parents[number]>()\n  }\n\n  setParent(scope: Scope<Parents[0], Tail<Parents>>) {\n    this.parent = scope\n  }\n\n  emit<C extends Produces>(context: C): Promise<Extract<Produces, C> | undefined> {\n    return this.signal.emit(context) as Promise<Extract<Produces, C>>\n  }\n\n  hasParent(): boolean {\n    return Boolean(this.parent)\n  }\n\n  parentScope<T extends Parents[0], P extends Tail<Parents>>(): Scope<T, P>\n  parentScope<T>(type: Type<T>): T\n  parentScope<T>(type?: Type<T>): T {\n    if (!this.parent) throw new Error('cannot find parent')\n    if (type && this.parent instanceof type) return this.parent\n    if (type) throw new Error('actual parent is not instance of type')\n    return this.parent\n  }\n}\n","import { Scope } from './scope'\nimport { BaseSchemes } from './types'\n\n/**\n * Signal types produced by NodeEditor instance\n * @typeParam Scheme - The scheme type\n * @priority 10\n * @group Primary\n */\nexport type Root<Scheme extends BaseSchemes> =\n  | { type: 'nodecreate', data: Scheme['Node'] }\n  | { type: 'nodecreated', data: Scheme['Node'] }\n  | { type: 'noderemove', data: Scheme['Node'] }\n  | { type: 'noderemoved', data: Scheme['Node'] }\n  | { type: 'connectioncreate', data: Scheme['Connection'] }\n  | { type: 'connectioncreated', data: Scheme['Connection'] }\n  | { type: 'connectionremove', data: Scheme['Connection'] }\n  | { type: 'connectionremoved', data: Scheme['Connection'] }\n  | { type: 'clear' }\n  | { type: 'clearcancelled' }\n  | { type: 'cleared' }\n\n/**\n * The NodeEditor class is the entry class. It is used to create and manage nodes and connections.\n * @typeParam Scheme - The scheme type\n * @priority 7\n * @group Primary\n */\nexport class NodeEditor<Scheme extends BaseSchemes> extends Scope<Root<Scheme>> {\n  private nodes: Scheme['Node'][] = []\n  private connections: Scheme['Connection'][] = []\n\n  constructor() {\n    super('NodeEditor')\n  }\n\n  /**\n   * Get a node by id\n   * @param id - The node id\n   * @returns The node or undefined\n   */\n  public getNode(id: Scheme['Node']['id']) {\n    return this.nodes.find(node => node.id === id)\n  }\n\n  /**\n   * Get all nodes\n   * @returns Copy of array with nodes\n   */\n  public getNodes() {\n    return this.nodes.slice()\n  }\n\n  /**\n   * Get all connections\n   * @returns Copy of array with onnections\n   */\n  public getConnections() {\n    return this.connections.slice()\n  }\n\n  /**\n   * Get a connection by id\n   * @param id - The connection id\n   * @returns The connection or undefined\n   */\n  public getConnection(id: Scheme['Connection']['id']) {\n    return this.connections.find(connection => connection.id === id)\n  }\n\n  /**\n   * Add a node\n   * @param data - The node data\n   * @returns Whether the node was added\n   * @throws If the node has already been added\n   * @emits nodecreate\n   * @emits nodecreated\n   */\n  async addNode(data: Scheme['Node']) {\n    if (this.getNode(data.id)) throw new Error('node has already been added')\n\n    if (!await this.emit({ type: 'nodecreate', data })) return false\n\n    this.nodes.push(data)\n\n    await this.emit({ type: 'nodecreated', data })\n    return true\n  }\n\n  /**\n   * Add a connection\n   * @param data - The connection data\n   * @returns Whether the connection was added\n   * @throws If the connection has already been added\n   * @emits connectioncreate\n   * @emits connectioncreated\n   */\n  async addConnection(data: Scheme['Connection']) {\n    if (this.getConnection(data.id)) throw new Error('connection has already been added')\n\n    if (!await this.emit({ type: 'connectioncreate', data })) return false\n\n    this.connections.push(data)\n\n    await this.emit({ type: 'connectioncreated', data })\n    return true\n  }\n\n  /**\n   * Remove a node\n   * @param id - The node id\n   * @returns Whether the node was removed\n   * @throws If the node cannot be found\n   * @emits noderemove\n   * @emits noderemoved\n   */\n  async removeNode(id: Scheme['Node']['id']) {\n    const index = this.nodes.findIndex(n => n.id === id)\n    const node = this.nodes[index]\n\n    if (index < 0) throw new Error('cannot find node')\n\n    if (!await this.emit({ type: 'noderemove', data: node })) return false\n\n    this.nodes.splice(index, 1)\n\n    await this.emit({ type: 'noderemoved', data: node })\n    return true\n  }\n\n  /**\n   * Remove a connection\n   * @param id - The connection id\n   * @returns Whether the connection was removed\n   * @throws If the connection cannot be found\n   * @emits connectionremove\n   * @emits connectionremoved\n   */\n  async removeConnection(id: Scheme['Connection']['id']) {\n    const index = this.connections.findIndex(n => n.id === id)\n    const connection = this.connections[index]\n\n    if (index < 0) throw new Error('cannot find connection')\n\n    if (!await this.emit({ type: 'connectionremove', data: connection })) return false\n\n    this.connections.splice(index, 1)\n\n    await this.emit({ type: 'connectionremoved', data: connection })\n    return true\n  }\n\n  /**\n   * Clear all nodes and connections\n   * @returns Whether the editor was cleared\n   * @emits clear\n   * @emits clearcancelled\n   * @emits cleared\n   */\n  async clear() {\n    if (!await this.emit({ type: 'clear' })) {\n      await this.emit({ type: 'clearcancelled' })\n      return false\n    }\n\n    for (const connection of this.connections.slice()) await this.removeConnection(connection.id)\n    for (const node of this.nodes.slice()) await this.removeNode(node.id)\n\n    await this.emit({ type: 'cleared' })\n    return true\n  }\n}\n","/* global globalThis*/\n\nconst nodeCrypto = () => import('node:crypto')\n\nconst crypto = globalThis.crypto as (typeof globalThis.crypto | Awaited<ReturnType<typeof nodeCrypto>>)\n\n/**\n * @returns A unique id\n */\nexport function getUID(): string {\n  if ('randomBytes' in crypto) {\n    return crypto.randomBytes(8).toString('hex')\n  }\n\n  const bytes = crypto.getRandomValues(new Uint8Array(8))\n  const array = Array.from(bytes)\n  const hexPairs = array.map(b => b.toString(16).padStart(2, '0'))\n\n  return hexPairs.join('')\n}\n","/**\n * Contains classes for classic scheme such as Node, Input, Output, Control, Socket, Connection\n * @module\n * @group Primary\n */\n\nimport { ConnectionBase, NodeBase } from '../types'\nimport { getUID } from '../utils'\n\ntype PortId = string\n\n/**\n * The socket class\n * @priority 7\n */\nexport class Socket {\n  /**\n   * @constructor\n   * @param name Name of the socket\n   */\n  constructor(public name: string) {\n\n  }\n}\n\n/**\n * General port class\n */\nexport class Port<S extends Socket> {\n  /**\n   * Port id, unique string generated by `getUID` function\n   */\n  id: PortId\n  /**\n   * Port index, used for sorting ports. Default is `0`\n   */\n  index?: number\n\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the port\n   * @param multipleConnections Whether the output port can have multiple connections\n   */\n  constructor(public socket: S, public label?: string, public multipleConnections?: boolean) {\n    this.id = getUID()\n  }\n}\n\n/**\n * The input port class\n * @priority 6\n */\nexport class Input<S extends Socket> extends Port<S> {\n  /**\n   * Control instance\n   */\n  control: Control | null = null\n  /**\n   * Whether the control is visible. Can be managed dynamically by extensions. Default is `true`\n   */\n  showControl = true\n\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the input port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `false`\n   */\n  constructor(public socket: S, public label?: string, public multipleConnections?: boolean) {\n    super(socket, label, multipleConnections)\n  }\n\n  /**\n   * Add control to the input port\n   * @param control Control instance\n   */\n  addControl(control: Control) {\n    if (this.control) throw new Error('control already added for this input')\n    this.control = control\n  }\n\n  /**\n   * Remove control from the input port\n   */\n  removeControl() {\n    this.control = null\n  }\n}\n\n/**\n * The output port class\n * @priority 5\n */\nexport class Output<S extends Socket> extends Port<S> {\n  /**\n   * @constructor\n   * @param socket Socket instance\n   * @param label Label of the output port\n   * @param multipleConnections Whether the output port can have multiple connections. Default is `true`\n   */\n  constructor(socket: S, label?: string, multipleConnections?: boolean) {\n    super(socket, label, multipleConnections !== false)\n  }\n}\n\n/**\n * General control class\n * @priority 5\n */\nexport class Control {\n  /**\n   * Control id, unique string generated by `getUID` function\n   */\n  id: string\n  /**\n   * Control index, used for sorting controls. Default is `0`\n   */\n  index?: number\n\n  constructor() {\n    this.id = getUID()\n  }\n}\n\n/**\n * Input control options\n */\ntype InputControlOptions<N> = {\n  /** Whether the control is readonly. Default is `false` */\n  readonly?: boolean,\n  /** Initial value of the control */\n  initial?: N,\n  /** Callback function that is called when the control value changes */\n  change?: (value: N) => void\n}\n/**\n * The input control class\n * @example new InputControl('text', { readonly: true, initial: 'hello' })\n */\nexport class InputControl<T extends 'text' | 'number', N = T extends 'text' ? string : number> extends Control {\n  value?: N\n  readonly: boolean\n\n  /**\n   * @constructor\n   * @param type Type of the control: `text` or `number`\n   * @param options Control options\n   */\n  constructor(public type: T, public options?: InputControlOptions<N>) {\n    super()\n    this.id = getUID()\n    this.readonly = options?.readonly\n\n    if (typeof options?.initial !== 'undefined') this.value = options.initial\n  }\n\n  /**\n   * Set control value\n   * @param value Value to set\n   */\n  setValue(value?: N) {\n    this.value = value\n    if (this.options?.change) this.options.change(value)\n  }\n}\n\n/**\n * The node class\n * @priority 10\n * @example new Node('math')\n */\nexport class Node<\n  Inputs extends { [key in string]?: Socket } = { [key in string]?: Socket },\n  Outputs extends { [key in string]?: Socket } = { [key in string]?: Socket },\n  Controls extends { [key in string]?: Control } = { [key in string]?: Control }\n> implements NodeBase {\n  /**\n   * Node id, unique string generated by `getUID` function\n   */\n  id: NodeBase['id']\n  /**\n   * Node inputs\n   */\n  inputs: { [key in keyof Inputs]?: Input<Exclude<Inputs[key], undefined>> } = {}\n  /**\n   * Node outputs\n   */\n  outputs: { [key in keyof Outputs]?: Output<Exclude<Outputs[key], undefined>> } = {}\n  /**\n   * Node controls\n   */\n  controls: Controls = {} as Controls\n  /**\n   * Whether the node is selected. Default is `false`\n   */\n  selected?: boolean\n\n  constructor(public label: string) {\n    this.id = getUID()\n  }\n\n  hasInput<K extends keyof Inputs>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.inputs, key)\n  }\n\n  addInput<K extends keyof Inputs>(key: K, input: Input<Exclude<Inputs[K], undefined>>) {\n    if (this.hasInput(key)) throw new Error(`input with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.inputs, key, { value: input, enumerable: true, configurable: true })\n  }\n\n  removeInput(key: keyof Inputs) {\n    delete this.inputs[key]\n  }\n\n  hasOutput<K extends keyof Outputs>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.outputs, key)\n  }\n\n  addOutput<K extends keyof Outputs>(key: K, output: Output<Exclude<Outputs[K], undefined>>) {\n    if (this.hasOutput(key)) throw new Error(`output with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.outputs, key, { value: output, enumerable: true, configurable: true })\n  }\n\n  removeOutput(key: keyof Outputs) {\n    delete this.outputs[key]\n  }\n\n  hasControl<K extends keyof Controls>(key: K) {\n    return Object.prototype.hasOwnProperty.call(this.controls, key)\n  }\n\n  addControl<K extends keyof Controls>(key: K, control: Controls[K]) {\n    if (this.hasControl(key)) throw new Error(`control with key '${String(key)}' already added`)\n\n    Object.defineProperty(this.controls, key, { value: control, enumerable: true, configurable: true })\n  }\n\n  removeControl(key: keyof Controls) {\n    delete this.controls[key]\n  }\n}\n\n/**\n * The connection class\n * @priority 9\n */\nexport class Connection<\n  Source extends Node,\n  Target extends Node\n> implements ConnectionBase {\n  /**\n   * Connection id, unique string generated by `getUID` function\n   */\n  id: ConnectionBase['id']\n  /**\n   * Source node id\n   */\n  source: NodeBase['id']\n  /**\n   * Target node id\n   */\n  target: NodeBase['id']\n\n  /**\n   * @constructor\n   * @param source Source node instance\n   * @param sourceOutput Source node output key\n   * @param target Target node instance\n   * @param targetInput Target node input key\n   */\n  constructor(\n    source: Source,\n    public sourceOutput: keyof Source['outputs'],\n    target: Target,\n    public targetInput: keyof Target['inputs']\n  ) {\n    if (!source.outputs[sourceOutput as string]) {\n      throw new Error(`source node doesn't have output with a key ${String(sourceOutput)}`)\n    }\n    if (!target.inputs[targetInput as string]) {\n      throw new Error(`target node doesn't have input with a key ${String(targetInput)}`)\n    }\n\n    this.id = getUID()\n    this.source = source.id\n    this.target = target.id\n  }\n}\n"],"names":["Signal","_classCallCheck","_defineProperty","_emit","_createClass","key","value","pipe","this","pipes","push","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","current","_iterator","_step","wrap","_context","prev","next","_createForOfIteratorHelper","s","n","done","sent","abrupt","t0","e","f","finish","stop","_x","apply","arguments","Scope","name","middleware","signal","addPipe","scope","Error","setParent","emit","debug","parent","Boolean","type","NodeEditor","_Scope","_inherits","_clear","_removeConnection","_removeNode","_addConnection","_addNode","_super","_createSuper","_this","_assertThisInitialized","call","id","nodes","find","node","slice","connections","connection","data","getNode","_callee2","_context2","getConnection","_x2","_callee3","index","_context3","findIndex","splice","_x3","_callee4","_context4","_x4","_callee5","_iterator2","_step2","_context5","removeConnection","removeNode","t1","crypto","globalThis","getUID","randomBytes","toString","bytes","getRandomValues","Uint8Array","Array","from","map","b","padStart","join","Socket","Port","socket","label","multipleConnections","Input","_Port","control","Output","_Port2","_super2","Control","InputControl","_Control","_super3","options","_this2","readonly","initial","_this$options","change","Node","Object","prototype","hasOwnProperty","inputs","input","hasInput","concat","String","defineProperty","enumerable","configurable","outputs","output","hasOutput","controls","hasControl","Connection","source","sourceOutput","target","targetInput"],"mappings":"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"}